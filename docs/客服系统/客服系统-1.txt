客服系统的目的是什么?

为什么我们不能直接去看文档

为什么不直接去搜索引擎(km/7000)、文档库(iwiki)上直接搜索问题?
然后就可以得到问题所处的事情的详细信息文档, 去具体的一个或者几个系统去查看文档然后得到想要的效果
或者得到一个操作文档, 去具体的一个或者几个系统上去操作然后得到想要的效果

当我们遇到问题时不总是先定位问题吗?
比如说 idea 中无法使用账号密码登陆 工蜂
那么我们先找到idea项目的文档库、问题库


我们写文档总是不能完全覆盖到使用者所遇到的问题， 按照正常流程我们总是想着非常系统化的写出几篇文档去满足用户, 但是实际上总是会有这的那的问题
与软件工程一样， 尽管我们有那么多的方法论、体系、系统观, 但是仍然会有很多问题, 所以我们应该反思一下, 自上而下的做事到底能做什么? 做到什么程度?
自上而下的做事只能针对已经出现的问题的最优解集合, 而且根据应该投入时间与实际投入时间的差异化, 导致结果会更加弱化

做事的目的是是什么?
能够帮人解决问题
自下而上的目的是什么?

所以说既然目的就是为了帮助人解决问题, 那么自上而下或者自下而上都是可以的, 甚至是打通信息整体流动循环, 形成业务闭环, 实现正向反馈
那么就是说我们能否去构思整体事情的脉络, 然后把握关键点的信息流动, 促使人员可以往业务闭环的方向去发展, 然后既能满足现在又具备不断调整修复完善自己最终实现更高性价比的功能


我们不是为了做事而做事, 陷入做事的漩涡中, 我们应该时而聚焦提高效率, 时而抽身发现系统问题, 保持开放的心态去做事情

我们可以梳理一套看文档的思路, 然后分享给大家, 这其实也就有很大的改善了
人与人的沟通成本是很大的, 如果能通过事先的约定的思路去标准化的做到一些程度就可以节约下很大一部分精力了, 于用户或者(一/二线)客服都是有益的, 
那么这样的话就是系统多思考一点, 用户和(一/二线)客服就能更好的, 这样的价值转换是可以的



>>>>>>>>>>>>>>>>>>>>>>>>>>>> 提炼一套看文档的方法论, 然后分享给大家, 从方式上进行提效
明确上级需要自己做什么
明确自己需要做什么

需要做什么事情?
	时间 
		时间点
		时间范围
	+ 事情
		事情方式
		事情效果
	在什么时间范围或者时间点在什么事情中通过什么方式达到什么效果, 通常都是分步骤分阶段的

	甚至可以直接根据用户提供一些蛛丝马迹去推断事情的所在的事情

产品提供方需要更加明显的显示文档的位置
明确哪里可以找到文档
根据文档描述明确自己需要怎么做
文档描述:
	是什么?
		作用范围, 大致有什么用
		版本化
	为什么要用?
		尝试性
		对比其他
	怎么做?
		首先建议录制一套尽可能单一的操作视频以及截图
		操作哪些系统, url, 软件名称,  程序名称 这些信息都需要逐步一一描述清楚
		描述数据流动、数据状态变动、数据关系范围
			哪些步骤需要用到哪些数据
	
	

如果用户不能或者没有建立这样的一套做事方法论, 那么我们可以通过不厌其烦的反复的反向引导用户建立一套系统化的做事方法论
甚至于如果解决完单个问题后的多个问题上还需要使用okr的方式, 引导用户建立okr的做事方法论



既要有自上而下的方式
也要自下而上, 打造业务闭环
客服方式能够有效的在多个领域形成组合能力, 而单个领域的文档通常确实很不错, 也能随着时间的推进而非常成熟,
如果有 A/B/C/D/E 领域, A/B/C/D/E 领域能够各自完成各自的文档, 但是 A-B/A-C/A-D/A-E/B-C/B-D/B-E/C-D/C-D/C-E...
客服方式能够站在用户角度去形成文档, 形成贴合用户角度的文档, 随着时间推移, 用户角度的文档库会愈加完善, 解决用户问题会愈加高效
单纯的聊天是不够的

>>>>>>>>>>>>>>>>>>>>>>>>>>>>使用事情记录的方式
反复明确用户理应处于的事情的领域, 需要记录用户在什么项目-项目的什么功能-项目的什么范围-项目的什么步骤, 使用已有的记录使得可以更快的圈定出用户所需要明确的事情的上文, 有了上文就更容易带出下文
反复明确用户讲的事情, 用户极大可能不会一次性讲清楚事情, 

咨询类事情:
	想要什么
	想要的是什么
	想要做什么


	


